#! /usr/local/bin/python

import sys
import os

CXX_COMPILER = "g++-11"
CXX_STD = "-std=c++20"
CXX_OPTIONS = [
    # "-ggdb",
    "-O3",
    "-Wall",
    "-Wextra",
    "-Wpedantic",
    "-Werror=return-type",
]

# Core Configurations
CORE_TARGET = "libglossocore.a"
CORE_SRCS = [
    "./core/Instruction.cc",
    "./core/Metadata.cc",
    "./core/Value.cc",
]

# olfactory Configurations
OLFACTORY_TARGET = "olfactory"
OLFACTORY_SRCS = [
    "./toolchain/olfactory/Error.cc",
    "./toolchain/olfactory/FileIO.cc",
    "./toolchain/olfactory/Preprocessor.cc",
    "./toolchain/olfactory/Compiler.cc",
    "./toolchain/olfactory/main.cc",
]
OLFACTORY_LIBS = [
    "-lglossocore",
]
OLFACTORY_LIB_DIRS = [
    "-Lbuild/lib",
]
OLFACTORY_INCLUDES = [
    "-Icore",
]

# glossovm Configurations
GLOSSOVM_TARGET = "glossovm"
GLOSSOVM_SRCS = [
    "./toolchain/glossovm/Error.cc",
    "./toolchain/glossovm/FileIO.cc",
    "./toolchain/glossovm/Vm.cc",
    "./toolchain/glossovm/Debugger.cc",
    "./toolchain/glossovm/main.cc",
]
GLOSSOVM_LIBS = [
    "-lglossocore",
]
GLOSSOVM_LIB_DIRS = [
    "-Lbuild/lib",
]
GLOSSOVM_INCLUDES = [
    "-Icore",
]

# Functions


def cat_to_str(list):
    return " ".join(list)


def print_info(string):
    print("[INFO] " + string)


def run_with(*args):
    argument = ""
    for arg in args:
        argument += arg
        argument += " "
    print_info(argument)
    return os.system(argument)


def change_extension(filename, extension):
    pre, oldext = os.path.splitext(filename)
    return pre + extension


def change_file_location(filename, location):
    basename = os.path.basename(filename)
    if location[-1] == "/":
        return location + basename
    else:
        return location + "/" + basename


######################
# Main Building Part #
######################
if len(sys.argv) > 1:
    if sys.argv[1] == "build" or sys.argv[1] == "b":
        # making directories
        run_with("mkdir -p ./build/obj")
        run_with("mkdir -p ./build/lib")
        run_with("mkdir -p ./build/bin")

        #################
        # building Core #
        #################
        print_info("\x1b[1m\x1b[4mBuilding Core\x1b[0m")
        objs_list = []
        for src in CORE_SRCS:
            objs_list.append(
                change_file_location(change_extension(src, ".o"), "./build/obj")
            )
            run_with(
                CXX_COMPILER,
                CXX_STD,
                cat_to_str(CXX_OPTIONS),
                "-c",
                src,
                "-o",
                objs_list[-1],
            )

        # linking other object files
        run_with(
            "ar rcs",
            CORE_TARGET,
            cat_to_str(objs_list),
        )
        run_with("mv", CORE_TARGET, "./build/lib")

        ######################
        # Building Olfactory #
        ######################
        print_info("\x1b[1m\x1b[4mBuilding Olfactory\x1b[0m")
        objs_list.clear()
        for src in OLFACTORY_SRCS:
            objs_list.append(
                change_file_location(change_extension(src, ".o"), "./build/obj")
            )
            run_with(
                CXX_COMPILER,
                CXX_STD,
                cat_to_str(CXX_OPTIONS),
                cat_to_str(OLFACTORY_INCLUDES),
                "-c",
                src,
                "-o",
                objs_list[-1],
            )
        run_with(
            CXX_COMPILER,
            CXX_STD,
            cat_to_str(OLFACTORY_LIB_DIRS),
            cat_to_str(OLFACTORY_LIBS),
            cat_to_str(objs_list),
            "-o",
            OLFACTORY_TARGET,
        )
        run_with("mv", OLFACTORY_TARGET, "./build/bin")

        #####################
        # Building Glossovm #
        #####################
        print_info("\x1b[1m\x1b[4mBuilding GlossoVm\x1b[0m")
        objs_list.clear()
        for src in GLOSSOVM_SRCS:
            objs_list.append(
                change_file_location(change_extension(src, ".o"), "./build/obj")
            )
            run_with(
                CXX_COMPILER,
                CXX_STD,
                cat_to_str(CXX_OPTIONS),
                cat_to_str(GLOSSOVM_INCLUDES),
                "-c",
                src,
                "-o",
                objs_list[-1],
            )
        run_with(
            CXX_COMPILER,
            CXX_STD,
            cat_to_str(GLOSSOVM_LIB_DIRS),
            cat_to_str(GLOSSOVM_LIBS),
            cat_to_str(objs_list),
            "-o",
            GLOSSOVM_TARGET,
        )
        run_with("mv", GLOSSOVM_TARGET, "./build/bin")

        #### END OF COMPILE CODES ####

    elif sys.argv[1] == "clean" or sys.argv[1] == "c":
        run_with("rm", "-r", "./build")
else:
    print("Usage: ./cpp-build [subcommands]")
    print()
    print("SubCommands:")
    print("build    build the project")
    print("clean    clean the object and execute files")
